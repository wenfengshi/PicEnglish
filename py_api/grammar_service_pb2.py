# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: grammar_service.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='grammar_service.proto',
  package='grammar_service',
  syntax='proto3',
  serialized_pb=_b('\n\x15grammar_service.proto\x12\x0fgrammar_service\"\x1e\n\x0bPingRequest\x12\x0f\n\x07message\x18\x01 \x01(\t\"\x1c\n\tPingReply\x12\x0f\n\x07message\x18\x01 \x01(\t\"<\n\x15GrammarCorrectRequest\x12\x0f\n\x07\x63ontent\x18\x01 \x01(\t\x12\x12\n\nerror_type\x18\x02 \x01(\t\"&\n\x13GrammarCorrectReply\x12\x0f\n\x07message\x18\x01 \x01(\t2\xb6\x01\n\x0eGrammarService\x12\x42\n\x04Ping\x12\x1c.grammar_service.PingRequest\x1a\x1a.grammar_service.PingReply\"\x00\x12`\n\x0eGrammarCorrect\x12&.grammar_service.GrammarCorrectRequest\x1a$.grammar_service.GrammarCorrectReply\"\x00\x42\x19\n\x17\x63om.engzo.grpc.examplesb\x06proto3')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)




_PINGREQUEST = _descriptor.Descriptor(
  name='PingRequest',
  full_name='grammar_service.PingRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='message', full_name='grammar_service.PingRequest.message', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=42,
  serialized_end=72,
)


_PINGREPLY = _descriptor.Descriptor(
  name='PingReply',
  full_name='grammar_service.PingReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='message', full_name='grammar_service.PingReply.message', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=74,
  serialized_end=102,
)


_GRAMMARCORRECTREQUEST = _descriptor.Descriptor(
  name='GrammarCorrectRequest',
  full_name='grammar_service.GrammarCorrectRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='content', full_name='grammar_service.GrammarCorrectRequest.content', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='error_type', full_name='grammar_service.GrammarCorrectRequest.error_type', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=104,
  serialized_end=164,
)


_GRAMMARCORRECTREPLY = _descriptor.Descriptor(
  name='GrammarCorrectReply',
  full_name='grammar_service.GrammarCorrectReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='message', full_name='grammar_service.GrammarCorrectReply.message', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=166,
  serialized_end=204,
)

DESCRIPTOR.message_types_by_name['PingRequest'] = _PINGREQUEST
DESCRIPTOR.message_types_by_name['PingReply'] = _PINGREPLY
DESCRIPTOR.message_types_by_name['GrammarCorrectRequest'] = _GRAMMARCORRECTREQUEST
DESCRIPTOR.message_types_by_name['GrammarCorrectReply'] = _GRAMMARCORRECTREPLY

PingRequest = _reflection.GeneratedProtocolMessageType('PingRequest', (_message.Message,), dict(
  DESCRIPTOR = _PINGREQUEST,
  __module__ = 'grammar_service_pb2'
  # @@protoc_insertion_point(class_scope:grammar_service.PingRequest)
  ))
_sym_db.RegisterMessage(PingRequest)

PingReply = _reflection.GeneratedProtocolMessageType('PingReply', (_message.Message,), dict(
  DESCRIPTOR = _PINGREPLY,
  __module__ = 'grammar_service_pb2'
  # @@protoc_insertion_point(class_scope:grammar_service.PingReply)
  ))
_sym_db.RegisterMessage(PingReply)

GrammarCorrectRequest = _reflection.GeneratedProtocolMessageType('GrammarCorrectRequest', (_message.Message,), dict(
  DESCRIPTOR = _GRAMMARCORRECTREQUEST,
  __module__ = 'grammar_service_pb2'
  # @@protoc_insertion_point(class_scope:grammar_service.GrammarCorrectRequest)
  ))
_sym_db.RegisterMessage(GrammarCorrectRequest)

GrammarCorrectReply = _reflection.GeneratedProtocolMessageType('GrammarCorrectReply', (_message.Message,), dict(
  DESCRIPTOR = _GRAMMARCORRECTREPLY,
  __module__ = 'grammar_service_pb2'
  # @@protoc_insertion_point(class_scope:grammar_service.GrammarCorrectReply)
  ))
_sym_db.RegisterMessage(GrammarCorrectReply)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\027com.engzo.grpc.examples'))
import grpc
from grpc.beta import implementations as beta_implementations
from grpc.beta import interfaces as beta_interfaces
from grpc.framework.common import cardinality
from grpc.framework.interfaces.face import utilities as face_utilities


class GrammarServiceStub(object):
  """The greeting service definition.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Ping = channel.unary_unary(
        '/grammar_service.GrammarService/Ping',
        request_serializer=PingRequest.SerializeToString,
        response_deserializer=PingReply.FromString,
        )
    self.GrammarCorrect = channel.unary_unary(
        '/grammar_service.GrammarService/GrammarCorrect',
        request_serializer=GrammarCorrectRequest.SerializeToString,
        response_deserializer=GrammarCorrectReply.FromString,
        )


class GrammarServiceServicer(object):
  """The greeting service definition.
  """

  def Ping(self, request, context):
    """Sends a greeting
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GrammarCorrect(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_GrammarServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Ping': grpc.unary_unary_rpc_method_handler(
          servicer.Ping,
          request_deserializer=PingRequest.FromString,
          response_serializer=PingReply.SerializeToString,
      ),
      'GrammarCorrect': grpc.unary_unary_rpc_method_handler(
          servicer.GrammarCorrect,
          request_deserializer=GrammarCorrectRequest.FromString,
          response_serializer=GrammarCorrectReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'grammar_service.GrammarService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class BetaGrammarServiceServicer(object):
  """The greeting service definition.
  """
  def Ping(self, request, context):
    """Sends a greeting
    """
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
  def GrammarCorrect(self, request, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


class BetaGrammarServiceStub(object):
  """The greeting service definition.
  """
  def Ping(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    """Sends a greeting
    """
    raise NotImplementedError()
  Ping.future = None
  def GrammarCorrect(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()
  GrammarCorrect.future = None


def beta_create_GrammarService_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
  request_deserializers = {
    ('grammar_service.GrammarService', 'GrammarCorrect'): GrammarCorrectRequest.FromString,
    ('grammar_service.GrammarService', 'Ping'): PingRequest.FromString,
  }
  response_serializers = {
    ('grammar_service.GrammarService', 'GrammarCorrect'): GrammarCorrectReply.SerializeToString,
    ('grammar_service.GrammarService', 'Ping'): PingReply.SerializeToString,
  }
  method_implementations = {
    ('grammar_service.GrammarService', 'GrammarCorrect'): face_utilities.unary_unary_inline(servicer.GrammarCorrect),
    ('grammar_service.GrammarService', 'Ping'): face_utilities.unary_unary_inline(servicer.Ping),
  }
  server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
  return beta_implementations.server(method_implementations, options=server_options)


def beta_create_GrammarService_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
  request_serializers = {
    ('grammar_service.GrammarService', 'GrammarCorrect'): GrammarCorrectRequest.SerializeToString,
    ('grammar_service.GrammarService', 'Ping'): PingRequest.SerializeToString,
  }
  response_deserializers = {
    ('grammar_service.GrammarService', 'GrammarCorrect'): GrammarCorrectReply.FromString,
    ('grammar_service.GrammarService', 'Ping'): PingReply.FromString,
  }
  cardinalities = {
    'GrammarCorrect': cardinality.Cardinality.UNARY_UNARY,
    'Ping': cardinality.Cardinality.UNARY_UNARY,
  }
  stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
  return beta_implementations.dynamic_stub(channel, 'grammar_service.GrammarService', cardinalities, options=stub_options)
# @@protoc_insertion_point(module_scope)
